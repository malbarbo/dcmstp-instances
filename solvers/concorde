#!/usr/bin/python3 -B

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import subprocess
import utils
import tempfile

CONCORDE = os.path.join(
    os.path.dirname(sys.argv[0]), '../target/solvers/concorde')


def main():
    m, d = utils.read_andinst(utils.read_values(sys.argv[1]))
    if any(x != 2 for x in d):
        raise Exception('All degree must be 2')
    m = utils.add_dummy_vertex(m)
    with tempfile.NamedTemporaryFile(mode='w') as tmp:
        utils.write_tsp(tmp, m)
        result = subprocess.run(
            [CONCORDE, '-x', '-f', tmp.name], stdout=subprocess.PIPE)
        lines = result.stdout.decode().split('\n')
        time = float(get_value('Total Running Time:', lines))
        obj = float(get_value('Optimal Solution:', lines))
        base = os.path.basename(tmp.name)
        f = base + '.sol'
        sol = read_solution(f)[1:-1]
        os.remove(f)
        remove([f, base + '.res', 'O' + base + '.res'])
        print(time)
        print(obj)
        print(utils.str_solution(sol))

def remove(files):
    for f in files:
        if os.path.exists(f):
            os.remove(f)


def read_solution(f):
    vals = list(map(int, open(f).read().split()))
    n = vals[0] - 1
    vals = vals[2:]
    r = []
    for i in range(n + 1):
        u = vals[i * 3 + 0]
        v = vals[i * 3 + 1]
        if u == n:
            part2 = r
            r = []
        r.append((u, v))

    r.extend(part2)
    return r


def get_value(key, lines):
    for line in lines:
        if line.startswith(key):
            return line[len(key):].split()[0]


if __name__ == "__main__":
    main()
